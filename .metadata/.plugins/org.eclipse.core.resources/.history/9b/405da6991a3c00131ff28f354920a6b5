package kmad;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;

public class IDThree implements Runnable{
//TODO: Make this class
	
	File rawData;
    ArrayList<Candidate> candidates = new ArrayList<Candidate>();
    private boolean training;
    private ID3Node root;
    private double entropy;
    private int bestFeatureIndex;
    
    public void run(){
		//put main code here for thread implementation- need to mutate the passed-in arraylist
		try{Thread.sleep(2000);}
		catch(InterruptedException e){}
		System.out.println("Hi! IDThree here!");
		
    }
	
	public IDThree(File data, boolean training){
		//TODO: fill-in constructor
		this.rawData = data;
		this.training = training;
		this.parseData();
		this.root = buildTree();
		this.bestFeatureIndex = findBestFeature();
		this.entropy = featureEntropy(this.bestFeatureIndex);
	}
	
	private void parseData(){
		
		Scanner in = null;
		
		try {
			in = new Scanner(this.rawData);
		} catch (FileNotFoundException e) {
			System.out.println("rawData not populated");
			System.exit(42); // can't do anything, exit.
		}

		
		File inFile = new File("transposedData_training.txt");
		Scanner ID3Data = null;
		ArrayList<Candidate> candidates = new ArrayList<Candidate>();


		try {
			ID3Data = new Scanner(inFile);
		} catch (FileNotFoundException e) {
			System.out.println("Input File for deltas not found");
			System.exit(1); // can't do anything, exit.
		}

		String row;
		
		double vals[] = new double[638];
		double delta[] = new double[319];
		int i = 0;
		Scanner in3;
		while (ID3Data.hasNextLine()) {
			row = ID3Data.nextLine();
			in3 = new Scanner(row);
			in3.useDelimiter(",");
			while (in3.hasNext()) {
				vals[i] = Double.parseDouble(in3.next());
				i++;
			}
			in3.close();
		}
		ID3Data.close();

		
		String line;

//		int u = 0;
		
		while (in.hasNext()) {

//			u++;
//			if (u == 100) { // get rid of for real
//				break;
//			}
			line = in.nextLine();
			Candidate c = new Candidate(line, this.training);
			candidates.add(c);
		}
		
		
	}
	
	class ID3Node {
		int featureId;
		ID3Node[] children = new ID3Node[2];
	}
	
	class ID3Leaf extends ID3Node{
		int label;
		
		ID3Leaf(int l){
			this.label = l;
		}
		
	}
	
	private int findBestFeature(){
		
		int numOfFeatures = candidates.numberOfFeatures();
		
		return 0;
	}
	
	private double featureEntropy(int index){
		
		int numOfCandidates = candidates.size();
		
		
		
		return 0.0;
	}

	
	private ID3Node buildTree(){
		
		int maxId = 0;
		double maxInfoGain = this.entropy - this.featureEntropy(0);
		
		for (int i = 1; i < root.featureId; i++) {
            double t = entropy - this.featureEntropy(i);
            if (t > maxInfoGain) {
                    maxInfoGain = t;
                    maxId = i;
            }
         
        ID3Node res = new ID3Node();
        res.featureId = maxId;
        DataSetPair p = s.split(new KeepTrueFilter(maxIdx));
        //System.out.println(p.first.size()+" "+p.second.size());
        res.children[0] = buildTree(p.first);
        res.children[1] = buildTree(p.second);
        return res;
    }
		
		
	}
	
	
}

