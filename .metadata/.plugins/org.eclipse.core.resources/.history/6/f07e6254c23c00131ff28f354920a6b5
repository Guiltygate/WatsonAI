package kmad;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;
import java.lang.Double;
import java.lang.Math;

/**
 * @author Wesley McCullough
 *
 *	Constructs and implements an ID3 classification/ranking system
 *
 *
 */
public class IDThree implements Runnable{
	File rawData;
	DataSet mainData;
    ArrayList<ArrayList<Double>> features = new ArrayList<ArrayList<Double>>();
    private ID3Node root;
    private double featureThreshold = 1000;
    private boolean training = false;
	 
    /**
	 * Constructs an ID3 ranking system
	 * 
	 * @param data
	 * @param training
	 */
	public IDThree(File data, boolean training){
		this.rawData = data;
		this.parseData();
		if(training){
			int bestFeatureIndex = findBestFeature();
			mainData = new DataSet(features, bestFeatureIndex);
			this.root = buildTree(mainData);
		} else {
			boolean temp = findIsCandidateAnswer(features.get(0));
		}
	    
	}
	
	public void run(){
		//put main code here for thread implementation- need to mutate the passed-in arraylist
		try{Thread.sleep(2000);}
		catch(InterruptedException e){}
		System.out.println("Hi! IDThree here!");
		}
	
    
	/**
	 * Parses the data and stores it as an ArrayList
	 */
	private void parseData(){
		
		Scanner ID3Data = null;

		try {
			ID3Data = new Scanner(this.rawData);
		} catch (FileNotFoundException e) {
			System.out.println("rawData not populated");
			System.exit(42); // can't do anything, exit.
		}

		String row;
		
		int i = 0;
		Scanner items;
		Double questionNumber = new Double(0);
		Double questionMarker = new Double(0);
		boolean leaveParse = false;
		
		while (ID3Data.hasNextLine()) {
			
			row = ID3Data.nextLine();
			items = new Scanner(row);
			items.useDelimiter(",");
			
			if(i==0){
				int j = 0;
				while (items.hasNext()) {
					String item = items.next();
					this.features.add(new ArrayList<Double>());
					this.features.get(j).add(new Double(item));
					questionNumber = this.features.get(0).get(1);
					questionMarker = questionNumber;
					j++;

					this.features.get(0).remove(1);
					this.features.get(0).remove(0);
					
				}
				
			} else {
				int j = 0;
				while (items.hasNext()) {
					String item = items.next();
					this.features.get(j).add(new Double(item));
					questionMarker = this.features.get(i).get(1);
					j++;
					
					this.features.get(i).remove(1);
					this.features.get(i).remove(0);
					
				}
				
				if(questionNumber.compareTo(questionMarker) != 0){
					//We have a new question!  
					//Delete last data and we're done parsing!
					
					this.features.remove(i);
					leaveParse = true;
				}
			}
			
			i++;
			items.close();
			
			if(leaveParse){
				break;
			}
		}
		
		ID3Data.close();
		
	}
	
	/**
	 * 
	 * @param candidate
	 * @return is the candidate an answer (true/false)
	 */
	private boolean findIsCandidateAnswer(ArrayList<Double> candidate){
		
		
		
		return false;
	}
	
	
	/**
	 * A single node for ID3 trees.
	 * 
	 * @author Wesley McCullough
	 *
	 */
	class ID3Node {
		int featureId;
		ID3Node[] children = new ID3Node[4];
	}
	
	/**
	 * A leaf for ID3 trees.
	 * 
	 * @author Wesley McCullough
	 *
	 */
	class ID3Leaf extends ID3Node{
		int label;
		
		ID3Leaf(int l){
			this.label = l;
		}
		
	}
	
	 /**
	  * Builds the ID3 tree
	  * 
	  * @param set
	  * @return an ID3 node with children
	  */
	private ID3Node buildTree(DataSet set){
		if (set.isEmpty() || set.allSameLabel())
            return new ID3Leaf(set.getMostFrequentLabel());

		int maxId = 0;
		double maxInfoGain = set.entropy - set.featureEntropy(0);
		
		for (int i = 1; i < set.featureIndex; i++) {
            double t = set.entropy - set.featureEntropy(i);
            if (t > maxInfoGain) {
                    maxInfoGain = t;
                    maxId = i;
            }
		}
        ID3Node res = new ID3Node();
        res.featureId = maxId;
        ArrayList<DataSet> p = set.split(maxId);

        res.children[0] = buildTree(p.get(0)); //Negative
        res.children[1] = buildTree(p.get(1)); //Zero
        res.children[2] = buildTree(p.get(2)); //Under Threshold
        res.children[3] = buildTree(p.get(3)); //Over Threshold
        
        return res;
		
	}
	
	/**
	 * Class DataSet holds the feature values as an ArrayList conglomerate.
	 * Also holds the feature that 'created' the set and that
	 * 
	 * @author Wesley McCullough
	 *
	 */
	class DataSet{
		
	    public double entropy;
	    public int featureIndex;
	    public double featureThreshold = 1000;
	 
	    ArrayList<ArrayList<Double>> features = new ArrayList<ArrayList<Double>>();
		
		DataSet(ArrayList<ArrayList<Double>> passedFeatures, int passedFeatureIndex){
			this.features = passedFeatures;
			this.featureIndex = passedFeatureIndex;
			this.entropy = this.featureEntropy(this.featureIndex);
		}
		
		public boolean isEmpty(){
			return this.features.size() == 0;
		}
		
		public boolean allSameLabel() {
            ArrayList<String> labelSet = new ArrayList<String>();
            double candidateValue = 0.0;
            
            for (int i = 0; i < this.features.get(0).size(); i++) {
            	candidateValue = this.features.get(i).get(this.featureIndex).doubleValue();
            	
            	if(candidateValue < 0.0 && !labelSet.contains("Negative")){
            		labelSet.add("Negative");
				} else if(candidateValue == 0.0 && !labelSet.contains("Zero")){
					labelSet.add("Zero");
				} else if(candidateValue > 0.0 && candidateValue < this.featureThreshold && !labelSet.contains("UnderThreshold")){
					labelSet.add("UnderThreshold");
				} else if(candidateValue >= this.featureThreshold && !labelSet.contains("OverThreshold")){
					labelSet.add("OverThreshold");
				} else {
					System.out.println("AllSameLabel: Candidate Value not negative, zero, less than the threshold, or greater than / equal to the threshold");
				}
            }
            return labelSet.size() == 1;
		}
		
		public int getMostFrequentLabel(){

			int numOfCandidates = this.features.get(0).size();
			
			int i;
			int countNegatives = 0;
			int countZeroes = 0;
			int countUnderThreshold = 0;
			int countOverThreshold = 0;
			double candidateValue;
			
			for(i = 0; i < numOfCandidates; i++){
				candidateValue = this.features.get(i).get(this.featureIndex).doubleValue(); 
				
				if(candidateValue < 0.0){
					countNegatives++;
				} else if(candidateValue == 0.0){
					countZeroes++;
				} else if(candidateValue > 0.0 && candidateValue < this.featureThreshold){
					countUnderThreshold++;
				} else if(candidateValue >= this.featureThreshold){
					countOverThreshold++;
				} else {
					System.out.println("FeatureEntropy: Candidate Value not negative, zero, less than the threshold, or greater than / equal to the threshold");
				}
			}
			
			int label = 0;
			
			if(countNegatives >= countZeroes && countNegatives >= countUnderThreshold && countNegatives >= countOverThreshold){
				label = 0;
			}else if(countZeroes >= countNegatives && countZeroes >= countUnderThreshold && countZeroes >= countOverThreshold){
				label = 1;
			}else if(countUnderThreshold >= countNegatives && countUnderThreshold >= countZeroes && countUnderThreshold >= countOverThreshold){
				label = 2;
			}else if(countOverThreshold >= countNegatives && countOverThreshold >= countZeroes && countOverThreshold >= countUnderThreshold){
				label = 3;
			} else {
				System.out.println("getMostFrequentLabels: Candidate Value not negative, zero, less than the threshold, or greater than / equal to the threshold");
			}
			
			return label;
		}
		
		public ArrayList<DataSet> split(int index){
			
			int numOfCandidates = this.features.get(0).size();
			
			int i;
			double candidateValue;

			ArrayList<Double> candidate;
			
			ArrayList<ArrayList<Double>> negatives = new ArrayList<ArrayList<Double>>();
			ArrayList<ArrayList<Double>> zeroes = new ArrayList<ArrayList<Double>>();
			ArrayList<ArrayList<Double>> underThresholds = new ArrayList<ArrayList<Double>>();
			ArrayList<ArrayList<Double>> overThresholds = new ArrayList<ArrayList<Double>>();
			
			for(i = 0; i < numOfCandidates; i++){
				
				candidateValue = this.features.get(i).get(index).doubleValue(); 
				candidate = this.features.get(i);
				candidate.remove(index);
				
				if(candidateValue < 0.0){
					negatives.add(candidate);
				} else if(candidateValue == 0.0){
					zeroes.add(candidate);
				} else if(candidateValue > 0.0 && candidateValue < this.featureThreshold){
					underThresholds.add(candidate);
				} else if(candidateValue >= this.featureThreshold){
					overThresholds.add(candidate);
				} else {
					System.out.println("Split: Candidate Value not negative, zero, less than the threshold, or greater than / equal to the threshold");
				}
			}
			
			DataSet negativeDataset = new DataSet(negatives, index);
			DataSet zeroDataset = new DataSet(negatives, index);
			DataSet underThresholdDataset = new DataSet(negatives, index);
			DataSet overThresholdDataset = new DataSet(negatives, index);
			
			ArrayList<DataSet> splinters = new ArrayList<DataSet>();
			splinters.add(negativeDataset);
			splinters.add(zeroDataset);
			splinters.add(underThresholdDataset);
			splinters.add(overThresholdDataset);
			
			return splinters;
		}
		
		public int findBestFeature(){
			
			int numOfFeatures = this.features.size();
			
			int i;
			int bestFeatureIndex = 2;
			double lowestEntropy = 2; //Entropy = [0,1], so this will always be replaced
			double tempEntropy;
			
			// The first two indices are not features, so skip them.
			for(i = 2; i < numOfFeatures; i++){
				tempEntropy = featureEntropy(i);
				if(tempEntropy < lowestEntropy){
					lowestEntropy = tempEntropy;
					bestFeatureIndex = i;
				}
			}
			
			return bestFeatureIndex;
		}
		
		public double featureEntropy(int index){
			
			int numOfCandidates = this.features.get(0).size();
			
			int i;
			int countNegatives = 0;
			int countZeroes = 0;
			int countUnderThreshold = 0;
			int countOverThreshold = 0;
			double candidateValue;
			
			for(i = 0; i < numOfCandidates; i++){
				candidateValue = this.features.get(i).get(index).doubleValue(); 
				
				if(candidateValue < 0.0){
					countNegatives++;
				} else if(candidateValue == 0.0){
					countZeroes++;
				} else if(candidateValue > 0.0 && candidateValue < this.featureThreshold){
					countUnderThreshold++;
				} else if(candidateValue >= this.featureThreshold){
					countOverThreshold++;
				} else {
					System.out.println("FeatureEntropy: Candidate Value not negative, zero, less than the threshold, or greater than / equal to the threshold");
				}
			}
			
			int totalSetSize = countNegatives + countZeroes + countUnderThreshold + countOverThreshold;
			
			double scoreNegatives = 0;
			double scoreZeroes = 0;
			double scoreUnderThreshold = 0;
			double scoreOverThreshold = 0;
			
			if(countNegatives > 0)
				scoreNegatives = -(countNegatives/totalSetSize)*(Math.log((double)countNegatives/totalSetSize)/Math.log(2.0));
			else
				scoreNegatives = 0;
			
			if(countNegatives > 0)
				scoreZeroes = -(countZeroes/totalSetSize)*(Math.log((double)countZeroes/totalSetSize)/Math.log(2.0));
			else
				scoreZeroes = 0;
			
			if(countNegatives > 0)
				scoreUnderThreshold = -(countUnderThreshold/totalSetSize)*(Math.log((double)countUnderThreshold/totalSetSize)/Math.log(2.0));
			else
				scoreUnderThreshold = 0;
			
			if(countNegatives > 0)
				scoreOverThreshold = -(countOverThreshold/totalSetSize)*(Math.log((double)countOverThreshold/totalSetSize)/Math.log(2.0));
			else
				scoreOverThreshold = 0;
			
			return (scoreNegatives + scoreZeroes + scoreUnderThreshold + scoreOverThreshold);
		}

	}
	
	public int findBestFeature(){
		
		int numOfFeatures = this.features.size();
		
		int i;
		int bestFeatureIndex = 2;
		double lowestEntropy = 2; //Entropy = [0,1], so this will always be replaced
		double tempEntropy;
		
		// The first two indices are not features, so skip them.
		for(i = 2; i < numOfFeatures; i++){
			tempEntropy = featureEntropy(i);
			if(tempEntropy < lowestEntropy){
				lowestEntropy = tempEntropy;
				bestFeatureIndex = i;
			}
		}
		
		return bestFeatureIndex;
	}
	
	public double featureEntropy(int index){
		
		int numOfCandidates = this.features.get(0).size();
		
		int i;
		int countNegatives = 0;
		int countZeroes = 0;
		int countUnderThreshold = 0;
		int countOverThreshold = 0;
		double candidateValue;
		
		for(i = 0; i < numOfCandidates; i++){
			candidateValue = this.features.get(i).get(index).doubleValue(); 
			
			if(candidateValue < 0.0){
				countNegatives++;
			} else if(candidateValue == 0.0){
				countZeroes++;
			} else if(candidateValue > 0.0 && candidateValue < this.featureThreshold){
				countUnderThreshold++;
			} else if(candidateValue >= this.featureThreshold){
				countOverThreshold++;
			} else {
				System.out.println("Candidate Value not negative, zero, less than the threshold, or greater than / equal to the threshold");
			}
		}
		
		int totalSetSize = countNegatives + countZeroes + countUnderThreshold + countOverThreshold;
		
		double scoreNegatives = 0;
		double scoreZeroes = 0;
		double scoreUnderThreshold = 0;
		double scoreOverThreshold = 0;
		
		if(countNegatives > 0)
			scoreNegatives = -(countNegatives/totalSetSize)*(Math.log((double)countNegatives/totalSetSize)/Math.log(2.0));
		else
			scoreNegatives = 0;
		
		if(countNegatives > 0)
			scoreZeroes = -(countZeroes/totalSetSize)*(Math.log((double)countZeroes/totalSetSize)/Math.log(2.0));
		else
			scoreZeroes = 0;
		
		if(countNegatives > 0)
			scoreUnderThreshold = -(countUnderThreshold/totalSetSize)*(Math.log((double)countUnderThreshold/totalSetSize)/Math.log(2.0));
		else
			scoreUnderThreshold = 0;
		
		if(countNegatives > 0)
			scoreOverThreshold = -(countOverThreshold/totalSetSize)*(Math.log((double)countOverThreshold/totalSetSize)/Math.log(2.0));
		else
			scoreOverThreshold = 0;
		
		return (scoreNegatives + scoreZeroes + scoreUnderThreshold + scoreOverThreshold);
	}

	
	
}

